{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,uDCAAD,EAAAC,EAAA,S,mDCGMC,GAFNC,EAAAF,EAAA,SAEsB,WACrBE,EAAAC,KAAKC,UAAUC,UAAUC,OAAO,iB,GAG3BC,EAAgB,WACrBL,EAAAC,KAAKC,UAAUC,UAAUG,IAAI,iB,ECD9B,SAASC,EAAmBC,GAC1B,IAAMC,EAAS,GAKf,OAHAD,EAAMC,OAAOC,SAAQ,SAAAC,G,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAC1BJ,EAAOG,GAAMC,C,IAERJ,C,CAQT,SAASK,EAAkBL,GACvB,IACMM,EAAcC,KAAKC,UAAUR,GACnCS,aAAaC,QAFD,SAEcJ,E,UFhBfK,I,OAAAC,EAASC,MAAAC,KAAAC,U,UAATH,I,OAAAA,EAAfI,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IAEUC,EACApB,EAMFqB,E,yEARJzB,I,SACqB0B,EAAAC,MAAMC,sB,cAArBJ,EAAMK,EAAAC,K,SACSJ,EAAAC,MAAMI,mB,OAArB3B,EAAMyB,EAAAC,MACZ,EAAAE,EAAAC,wBAAuBT,GACvBE,EAAAC,MAAMO,eAAeV,EAAOW,MAC5BT,EAAAC,MAAMS,cAAcZ,EAAOa,aAE3B5B,EADkBP,EAAmBE,IAEjCqB,GAAc,EAAAO,EAAAM,oBAClB,EAAAC,EAAAC,SAAuBf,EAAYgB,SACnCC,IACAhD,I,6CAZoBuB,MAAAC,KAAAC,U,CERxB1B,EAAA,SFsBAsB,IDhBA4B,SAASC,iBAAiB,SAAS,SAACC,GAClC,IAAMC,EAASD,EAAEC,OAAOC,QAAQ,oBAEhC,GADwBD,GAAUA,EAAOE,cAAclD,UAAUmD,SAAStD,EAAAC,KAAKsD,sBAAsBpD,UAAUqD,OAC1F,CACnB,GAA0B,QAAvBL,EAAOM,YAAuB,OACjC1B,EAAAC,MAAMC,oBAAoByB,SAASP,EAAOM,cACvCE,MAAK,SAAAC,GAEJ,OADAb,IACOc,aAAaD,EAAKd,Q,QAIjC,IAAMgB,EAAgB,SAACC,GACrB,OAAIA,GAAe,EACV,CAAC,MAAOA,EAAa,EAAGA,EAAa,GAG1CA,EAAc,GAAKA,EAAc,EAC5B,CAAC,MAAOA,EAAa,GAG3BA,GAAe,EACV,GAGD,CAACA,EAAa,EAAGA,EAAa,E,EAEjCC,EAAgB,SAACD,GACrB,MAAO,CAACA,EAAc,EAAGA,EAAc,EAAG,M,EActChB,EAA+B,WACnC/C,EAAAC,KAAKsD,sBAAsBU,UAAY,GAEvC,IAAIF,EAAchC,EAAAC,MAAMkC,iBACpBxB,EAAcX,EAAAC,MAAMmC,gBACxBnE,EAAAC,KAAKmE,uBAAuBX,YAAcf,EAC1C,IACI2B,EADEC,EAlBoB,SAACP,EAAarB,GAEtC,OAAkB,GAAfqB,EACI,CAAC,EAAG,EAAG,EAAG,EAAG,GAGlBA,GAAerB,EAEV,CAACA,EAAc,EAAGA,EAAc,EAAGA,EAAc,EAAGA,EAAc,EAAGA,EAAc,GAErF,CAACoB,EAAcC,GAAcA,EAAaC,EAAcD,G,CAQtCQ,CAAoBR,EAAarB,GAE1D2B,EAAaC,EAAiBE,KAAK,GAAGC,KAAI,SAACjB,GACzC,MAAO,6DAAuGkB,OAA1CX,IAAgBP,EAAQ,SAAW,GAAG,MAAUkB,OAANlB,EAAM,iB,IAEtHmB,EAA4BN,E,EAExBM,EAA8B,SAACC,GAC/B5E,EAAAC,KAAKsD,sBAAsBsB,WAAWC,OAAS,IACjD9E,EAAAC,KAAKsD,sBAAsBU,UAAY,MAEpB,IAAjBW,EAAME,QACR9E,EAAAC,KAAKsD,sBAAsBwB,mBAAmB,aAAcH,EAAMI,KAAK,IAAIC,QAAQ,IAAK,K,EAI5F,CAACjF,EAAAC,KAAKiF,mBAAoBlF,EAAAC,KAAKkF,oBAAoBV,KAAI,SAACW,GAEpDA,EAAKnC,iBAAiB,QAASxB,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IASjByD,E,qEARID,EAAKjF,UAAUqD,MAAM8B,SAAS,QAC7CvD,EAAAC,MAAM+B,aAAe,EAAMhC,EAAAC,MAAM+B,aAAe,GAE1ChC,EAAAC,MAAMuD,aAAY,C,eAEnBnE,I,sCAGkBW,EAAAC,MAAMwD,oB,OAAlBH,EAAGnD,EAAAC,MACT,EAAAS,EAAAC,SAAuBwC,EAAIvC,S,+CIlFvCjD,EAAAC,EAAA,S,0EASe2F,I,OAAAC,EAAgBpE,MAAAC,KAAAC,U,UAAhBkE,I,OAAAA,EAAfjE,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,kEACE+D,YAAW,W,OAAO3F,EAAAC,KAAK2F,gBAAgBC,QAAS,C,GAAO,K,4CAD1BvE,MAAAC,KAAAC,U,UAMhBsE,I,OAAAA,EAAfrE,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAwBmE,G,IAQdC,EACAC,EAOAnE,E,qEAfRiE,EAAMG,iBACN7F,KACI0F,EAAMI,cAAcC,YAAY5C,MAAK,C,uBACvCxD,EAAAC,KAAK2F,gBAAgBC,QAAS,EAC9B9D,EAAAC,MAAMqE,eAAeN,EAAMI,cAAcC,YAAY5C,OACrDuC,EAAMI,cAAcC,YAAY5C,MAAQ,GACxCzB,EAAAC,MAAMsE,Y,SACiBvE,EAAAC,MAAMwD,oB,OAAvBQ,EAAQ9D,EAAAC,KACR8D,EAAeD,EAASlD,QAE9Bf,EAAAC,MAAMO,eAAeyD,EAASxD,MAC9BT,EAAAC,MAAMS,cAAcuD,EAAStD,aAEzBuD,EAAanB,OAAS,IACxB,EAAAzC,EAAAC,wBAAuB0D,GACnBlE,GAAc,EAAAO,EAAAM,oBAClB,EAAAC,EAAAC,SAAuBf,EAAYgB,SAEnCf,EAAAC,MAAMuD,cAAe,EACrBxC,MAEA/C,EAAAC,KAAK2F,gBAAgBC,QAAS,EAC9BJ,K,wBAGFzF,EAAAC,KAAK2F,gBAAgBC,QAAS,EAC9BJ,I,QAEF1F,I,6CA7BqBuB,MAAAC,KAAAC,U,CARvBxB,EAAAC,KAAK2F,gBAAgBC,QAAS,EAM9B7F,EAAAC,KAAKsG,aAAatD,iBAAiB,U,SAEX8C,G,OAATD,EAAQxE,MAAAC,KAAAC,U","sources":["src/partials_js/pagination.js","src/partials_js/main.js","src/partials_js/spinner.js","src/partials_js/local_genres-storage.js","src/partials_js/search.js"],"sourcesContent":["import {movie} from './api';\nimport { refs } from './refs';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\n\nimport { fetchData } from './main';\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('.item-pagination');\n  const isTargetCorrect = target && target.parentElement.classList.contains(refs.paginationWrapperNode.classList.value);\n  if (isTargetCorrect) {\n    if(target.textContent === '...') return;\n    movie.fetchTrendingMovies(parseInt(target.textContent))\n      .then(data => {\n        preparePaginationDynamicList();\n        return renderMovies(data.results)\n      });\n  }\n});\nconst getPrevValues = (currentPage) => {\n  if (currentPage >= 5) {\n    return ['...', currentPage -2, currentPage -1]\n  }\n  // \n  if (currentPage > 2 && currentPage < 5){\n    return [\"...\", currentPage -1]\n  }\n\n  if(currentPage <= 2){\n    return[]\n  }\n\n  return [currentPage -2, currentPage -1]\n};\nconst getNextValues = (currentPage) => {\n  return [currentPage + 1, currentPage + 2, '...'];\n}\nconst getPaginationValues = (currentPage, total_pages) => {\n  // if (movie.isFirstPageActive) {\n    if(currentPage == 1){\n    return [2, 3, 4, 5, 6];\n  }\n\n  if (currentPage == total_pages) {\n    // return DEFAULT_END_PAGINATION;\n    return [total_pages - 5, total_pages - 4, total_pages - 3, total_pages - 2, total_pages - 1]\n  }\n  return [getPrevValues(currentPage), currentPage, getNextValues(currentPage)];\n}\nconst preparePaginationDynamicList = () => {\n  refs.paginationWrapperNode.innerHTML = '';\n  // const { currentPage, total_pages} = movie;\n  let currentPage = movie.getCurrentPage();\n  let total_pages = movie.getTotalPages();\n  refs.lastPaginationItemNode.textContent = total_pages;\n  const paginationValues = getPaginationValues(currentPage, total_pages);\n  let nodesArray;\n  nodesArray = paginationValues.flat(1).map((value) => {\n    return `<li class=\"item-pagination\"><button class=\"btn-pagination ${currentPage === value ? 'active' : ''}\">${value}</button></li>`\n  });\n  renderPaginationDynamicList(nodesArray);\n}\nconst renderPaginationDynamicList = (nodes) => {\n  if (refs.paginationWrapperNode.childNodes.length > 0){\n    refs.paginationWrapperNode.innerHTML = null;\n  }\n  if (nodes.length !== 0){\n    refs.paginationWrapperNode.insertAdjacentHTML('afterbegin', nodes.join(\"\").replace(',', '.'))\n  }\n}\n\n[refs.prevPaginationNode, refs.nextPaginationNode].map((node) => {\n  // node && node.addEventListener('click', async () => {\n    node.addEventListener('click', async () => {\n    const pageValue = node.classList.value.includes('prev') ?\n      (movie.currentPage -= 1) : (movie.currentPage += 1);\n     \n          if(movie.firstRequest){\n            // movie.setCurrentPage(event.target.textContent);\n            fetchData();\n          } else{\n            // movie.setCurrentPage(event.target.textContent);\n            const xxx = await movie.fetchSearchMovies();\n            createMarkupCardsFilms(xxx.results);\n          }\n        })\n})\n\n\nexport {preparePaginationDynamicList};","import { movie } from \"./api\";\nimport createMarkupCardsFilms from \"./createMarkupCardsFilms\";\nimport {saveLocalStorageMovies, getLocalStorage} from './local_storage';\nimport {preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList} from \"./pagination\";\nimport { saveStorageGenres, createGenresObject } from './local_genres-storage';\n\n\nasync function fetchData (){\n    preloaderShow();\n    const movies = await movie.fetchTrendingMovies();\n    const genres = await movie.fetchMovieGenres();\n    saveLocalStorageMovies(movies);\n    movie.setCurrentPage(movies.page);\n    movie.setTotalPages(movies.total_pages);\n    const objGenres = createGenresObject(genres);\n    saveStorageGenres(objGenres);\n    let cardsMovies = getLocalStorage()\n    createMarkupCardsFilms(cardsMovies.results);\n    preparePaginationDynamicList();\n    preloaderHide();\n}\nfetchData();\n\nexport {fetchData};","\nimport { refs } from \"./refs\";\n\nconst preloaderHide = () => {\n\trefs.preloader.classList.remove('show-preloader');\n}\n\nconst preloaderShow = () => {\n\trefs.preloader.classList.add('show-preloader');\n}\n\nexport { preloaderHide, preloaderShow }\n\n","import { movie } from './api';\n\n/**\n *\n * @param {*} array\n * @returns an object contains key=id & value=genre\n */\nfunction createGenresObject(array) {\n  const genres = {};\n\n  array.genres.forEach(({ id, name }) => {\n    genres[id] = name;\n  });\n  return genres;\n}\n\n/**\n *\n * @param {*} genres key\n * @returns an object {id: genre} saved in the Local Storage\n */\nfunction saveStorageGenres(genres) {\n    const key = 'genres';\n    const genresState = JSON.stringify(genres);\n    localStorage.setItem(key, genresState);\n}\n\n\n\n/**\n *\n * @param {*} genre_ids\n * @param {*} loadGenres\n * @returns array of genres and can use for modal\n */\nexport {saveStorageGenres, createGenresObject}","import { movie } from './api';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\nimport { refs } from './refs';\nimport { saveLocalStorageMovies, getLocalStorage } from './local_storage';\nimport { preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList } from './pagination';\n\nrefs.searchBadResult.hidden = true;\n\nasync function hideErrorMessage() {\n  setTimeout(() => (refs.searchBadResult.hidden = true), 2000);\n}\n\nrefs.searchButton.addEventListener('submit', onSubmit);\n\nasync function onSubmit(event) {\n  event.preventDefault();\n  preloaderShow();\n  if (event.currentTarget.searchQuery.value) {\n    refs.searchBadResult.hidden = true;\n    movie.setSearchValue(event.currentTarget.searchQuery.value);\n    event.currentTarget.searchQuery.value = '';\n    movie.resetPage();\n    const response = await movie.fetchSearchMovies();\n    const searchAnswer = response.results;\n\n    movie.setCurrentPage(response.page);\n    movie.setTotalPages(response.total_pages);\n\n    if (searchAnswer.length > 0) {\n      saveLocalStorageMovies(response);\n      let cardsMovies = getLocalStorage();\n      createMarkupCardsFilms(cardsMovies.results);\n\n      movie.firstRequest = false;\n      preparePaginationDynamicList();\n    } else {\n      refs.searchBadResult.hidden = false;\n      hideErrorMessage();\n    }\n  } else {\n    refs.searchBadResult.hidden = false;\n    hideErrorMessage();\n  }\n  preloaderHide();\n}\n\nexport { onSubmit };\n"],"names":["$bpxeT","parcelRequire","$8d035050df10a3ec$export$f4c41a4539594acb","$2gsSa","refs","preloader","classList","remove","$8d035050df10a3ec$export$c8b0c55c24870a90","add","$51aa41606fb95c30$export$94e2638a41923eca","array","genres","forEach","param","id","name","$51aa41606fb95c30$export$a27d5cb887d5263a","genresState","JSON","stringify","localStorage","setItem","$24dcd06c907632ab$export$8134c072fddab6a5","$24dcd06c907632ab$var$_fetchData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","movies","cardsMovies","$fpMk3","movie","fetchTrendingMovies","_ctx","sent","fetchMovieGenres","$16XXu","saveLocalStorageMovies","setCurrentPage","page","setTotalPages","total_pages","getLocalStorage","$j9P1y","default","results","$b4b44c749b77734b$export$8f98098a7ec6ad44","document","addEventListener","e","target","closest","parentElement","contains","paginationWrapperNode","value","textContent","parseInt","then","data","renderMovies","$b4b44c749b77734b$var$getPrevValues","currentPage","$b4b44c749b77734b$var$getNextValues","innerHTML","getCurrentPage","getTotalPages","lastPaginationItemNode","nodesArray","paginationValues","$b4b44c749b77734b$var$getPaginationValues","flat","map","concat","$b4b44c749b77734b$var$renderPaginationDynamicList","nodes","childNodes","length","insertAdjacentHTML","join","replace","prevPaginationNode","nextPaginationNode","node","xxx","includes","firstRequest","fetchSearchMovies","$302c553ce3ce8ba2$var$hideErrorMessage","$302c553ce3ce8ba2$var$_hideErrorMessage","setTimeout","searchBadResult","hidden","$302c553ce3ce8ba2$var$_onSubmit","event","response","searchAnswer","preventDefault","currentTarget","searchQuery","setSearchValue","resetPage","searchButton"],"version":3,"file":"index.e8337cc1.js.map"}