{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-1ae76945e5ae88a4.js","src/partials_js/pagination.js","node_modules/@parcel/runtime-js/lib/runtime-f9e48c95823a08df.js","src/partials_js/createMarkupCardsFilms.js","src/partials_js/main.js","src/partials_js/spinner.js","src/partials_js/local_genres-storage.js","src/partials_js/search.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.deb61e46.js\\\",\\\"j8d51\\\":\\\"no_image.657fab7f.jpg\\\",\\\"eM9ss\\\":\\\"library.ebd1c4a6.js\\\"}\"));","import {movie} from './api';\nimport { refs } from './refs';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\n\nimport { fetchData } from './main';\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('.item-pagination');\n  const isTargetCorrect = target && target.parentElement.classList.contains(refs.paginationWrapperNode.classList.value);\n  if (isTargetCorrect) {\n    if(target.textContent === '...') return;\n    movie.fetchTrendingMovies(parseInt(target.textContent))\n      .then(data => {\n        preparePaginationDynamicList();\n        return renderMovies(data.results)\n      });\n  }\n});\nconst getPrevValues = (currentPage) => {\n  if (currentPage >= 5) {\n    return ['...', currentPage -2, currentPage -1]\n  }\n  // \n  if (currentPage > 2 && currentPage < 5){\n    return [\"...\", currentPage -1]\n  }\n\n  if(currentPage <= 2){\n    return[]\n  }\n\n  return [currentPage -2, currentPage -1]\n};\nconst getNextValues = (currentPage) => {\n  return [currentPage + 1, currentPage + 2, '...'];\n}\nconst getPaginationValues = (currentPage, total_pages) => {\n  // if (movie.isFirstPageActive) {\n    if(currentPage == 1){\n    return [2, 3, 4, 5, 6];\n  }\n\n  if (currentPage == total_pages) {\n    // return DEFAULT_END_PAGINATION;\n    return [total_pages - 5, total_pages - 4, total_pages - 3, total_pages - 2, total_pages - 1]\n  }\n  return [getPrevValues(currentPage), currentPage, getNextValues(currentPage)];\n}\nconst preparePaginationDynamicList = () => {\n  refs.paginationWrapperNode.innerHTML = '';\n  // const { currentPage, total_pages} = movie;\n  let currentPage = movie.getCurrentPage();\n  let total_pages = movie.getTotalPages();\n  refs.lastPaginationItemNode.textContent = total_pages;\n  const paginationValues = getPaginationValues(currentPage, total_pages);\n  let nodesArray;\n  nodesArray = paginationValues.flat(1).map((value) => {\n    return `<li class=\"item-pagination\"><button class=\"btn-pagination ${currentPage === value ? 'active' : ''}\">${value}</button></li>`\n  });\n  renderPaginationDynamicList(nodesArray);\n}\nconst renderPaginationDynamicList = (nodes) => {\n  if (refs.paginationWrapperNode.childNodes.length > 0){\n    refs.paginationWrapperNode.innerHTML = null;\n  }\n  if (nodes.length !== 0){\n    refs.paginationWrapperNode.insertAdjacentHTML('afterbegin', nodes.join(\"\").replace(',', '.'))\n  }\n}\n\n[refs.prevPaginationNode, refs.nextPaginationNode].map((node) => {\n  // node && node.addEventListener('click', async () => {\n    node.addEventListener('click', async () => {\n    const pageValue = node.classList.value.includes('prev') ?\n      (movie.currentPage -= 1) : (movie.currentPage += 1);\n     \n          if(movie.firstRequest){\n            // movie.setCurrentPage(event.target.textContent);\n            fetchData();\n          } else{\n            // movie.setCurrentPage(event.target.textContent);\n            const xxx = await movie.fetchSearchMovies();\n            createMarkupCardsFilms(xxx.results);\n          }\n        })\n})\n\n\nexport {preparePaginationDynamicList};","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"j8d51\")).toString();","const BASE_URL_POSTER = 'https://image.tmdb.org/t/p/w500';\nimport noPhoto from '../images/no_image.jpg';\nimport { refs } from './refs';\n/**\n *\n * @param {*} arrayMovies\n * @returns markUP whith cards films\n */\n\nfunction markUpGenresInModal(genre_ids, loadGenres) {\n  let genersArray = []; // array for genres value\n  if (genre_ids) {\n    for (const key in loadGenres) {\n      if (genre_ids.includes(Number(key))) {\n        genersArray.push(' ' + loadGenres[key]);\n      }\n    }\n  } else {\n    genersArray = 'Sorry, but no information about genres';\n  }\n  return genersArray;\n}\n\nfunction markUpMainGenres(genre_ids, loadGenres) {\n  let genresForMain = markUpGenresInModal(genre_ids, loadGenres);\n  if (genresForMain && genresForMain.length >= 1) {\n    if (genresForMain.length > 3 || genresForMain.join('').length > 20) {\n      genresForMain.splice(2, 0, ' Other');\n      genresForMain.splice(3);\n      return genresForMain;\n    } else return genresForMain;\n  } else return (genresForMain = 'No information about genres');\n}\n\nexport default function createMarkupCardsFilms(arrayMovies) {\n  let markup = arrayMovies\n    .map(\n      ({ poster_path, title, genre_ids, release_date, vote_average, id }) => {\n        let genresState = localStorage.getItem('genres');\n        const loadGenres = JSON.parse(genresState);\n\n        let genresLoad = markUpMainGenres(genre_ids, loadGenres);\n\n        const imgRow = poster_path\n          ? `<img class=\"img-cover\" src=\"${BASE_URL_POSTER}${poster_path}\" alt=\"${title}\"/>`\n          : `<img class=\"img-cover\" src=\"${noPhoto}\" alt=\"no photo\" width=\"400\" height=\"500\">`;\n\n        const ratingRow = vote_average\n          ? `<p class=\"rating\">${vote_average.toFixed(1)}</p>`\n          : `<p class=\"rating visually-hidden\"></p>`;\n\n        return `<li class=\"item-films\"  data-index-film=\"${id}\">\n                ${imgRow}\n                <p class=\"title\">${\n                  title ? title.toUpperCase() : 'Sorry, no information'\n                } </p>\n                <div class=\"film-info\">\n                  <p class=\"genre\">${genresLoad}</p>\n                  <p class=\"year\">${\n                    release_date ? release_date.slice(0, 4) : 'N/A'\n                  }</p>\n                 ${ratingRow}\n                </div>\n              </li>`;\n      }\n    )\n    .join('');\n  refs.mainMarkFilms.innerHTML = markup;\n  refs.searchButton.scrollIntoView({ block: 'center', behavior: 'smooth' });\n}\n","import { movie } from \"./api\";\nimport createMarkupCardsFilms from \"./createMarkupCardsFilms\";\nimport {saveLocalStorageMovies, getLocalStorage} from './local_storage';\nimport {preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList} from \"./pagination\";\nimport { saveStorageGenres, createGenresObject } from './local_genres-storage';\n\n\nasync function fetchData (){\n    preloaderShow();\n    const movies = await movie.fetchTrendingMovies();\n    const genres = await movie.fetchMovieGenres();\n    saveLocalStorageMovies(movies);\n    movie.setCurrentPage(movies.page);\n    movie.setTotalPages(movies.total_pages);\n    const objGenres = createGenresObject(genres);\n    saveStorageGenres(objGenres);\n    let cardsMovies = getLocalStorage()\n    createMarkupCardsFilms(cardsMovies.results);\n    preparePaginationDynamicList();\n    preloaderHide();\n}\nfetchData();\n\nexport {fetchData};","\nimport { refs } from \"./refs\";\n\nconst preloaderHide = () => {\n\trefs.preloader.classList.remove('show-preloader');\n}\n\nconst preloaderShow = () => {\n\trefs.preloader.classList.add('show-preloader');\n}\n\nexport { preloaderHide, preloaderShow }\n\n","import { movie } from './api';\n\n/**\n *\n * @param {*} array\n * @returns an object contains key=id & value=genre\n */\nfunction createGenresObject(array) {\n  const genres = {};\n\n  array.genres.forEach(({ id, name }) => {\n    genres[id] = name;\n  });\n  return genres;\n}\n\n/**\n *\n * @param {*} genres key\n * @returns an object {id: genre} saved in the Local Storage\n */\nfunction saveStorageGenres(genres) {\n    const key = 'genres';\n    const genresState = JSON.stringify(genres);\n    localStorage.setItem(key, genresState);\n}\n\n\n\n/**\n *\n * @param {*} genre_ids\n * @param {*} loadGenres\n * @returns array of genres and can use for modal\n */\nexport {saveStorageGenres, createGenresObject}","import { movie } from './api';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\nimport { refs } from './refs';\nimport { saveLocalStorageMovies, getLocalStorage } from './local_storage';\nimport { preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList } from './pagination';\n\nrefs.searchBadResult.hidden = true;\n\nasync function hideErrorMessage() {\n  setTimeout(() => (refs.searchBadResult.hidden = true), 2000);\n}\n\nrefs.searchButton.addEventListener('submit', onSubmit);\n\nasync function onSubmit(event) {\n  event.preventDefault();\n  preloaderShow();\n  if (event.currentTarget.searchQuery.value) {\n    refs.searchBadResult.hidden = true;\n    movie.setSearchValue(event.currentTarget.searchQuery.value);\n    event.currentTarget.searchQuery.value = '';\n    movie.resetPage();\n    const response = await movie.fetchSearchMovies();\n    const searchAnswer = response.results;\n\n    movie.setCurrentPage(response.page);\n    movie.setTotalPages(response.total_pages);\n\n    if (searchAnswer.length > 0) {\n      saveLocalStorageMovies(response);\n      let cardsMovies = getLocalStorage();\n      createMarkupCardsFilms(cardsMovies.results);\n\n      movie.firstRequest = false;\n      preparePaginationDynamicList();\n    } else {\n      refs.searchBadResult.hidden = false;\n      hideErrorMessage();\n    }\n  } else {\n    refs.searchBadResult.hidden = false;\n    hideErrorMessage();\n  }\n  preloaderHide();\n}\n\nexport { onSubmit };\n"],"names":["parcelRequire","register","JSON","parse","$ll9qB","$76955bdec34820af$exports","URL","resolve","import","meta","url","toString","$92e6f1c612fbf93c$var$markUpMainGenres","genre_ids","loadGenres","genresForMain","genersArray","key","includes","Number","push","$92e6f1c612fbf93c$var$markUpGenresInModal","length","join","splice","$92e6f1c612fbf93c$export$2e2bcd8739ae039","arrayMovies","markup","map","poster_path","title","release_date","vote_average","id","genresState","localStorage","getItem","genresLoad","imgRow","$parcel$interopDefault","ratingRow","toFixed","toUpperCase","slice","$kgjKk","refs","mainMarkFilms","innerHTML","searchButton","scrollIntoView","block","behavior","$a64966ae89115f44$export$f4c41a4539594acb","preloader","classList","remove","$a64966ae89115f44$export$c8b0c55c24870a90","add","$36ac885cdd85b1bf$export$94e2638a41923eca","array","genres","forEach","name","$36ac885cdd85b1bf$export$a27d5cb887d5263a","stringify","setItem","async","$738ac1d93c48538f$export$8134c072fddab6a5","movies","movie","fetchTrendingMovies","fetchMovieGenres","$hbEqn","saveLocalStorageMovies","setCurrentPage","page","setTotalPages","total_pages","getLocalStorage","results","$19ec9ba508b87b29$export$8f98098a7ec6ad44","document","addEventListener","e","target","closest","parentElement","contains","paginationWrapperNode","value","textContent","parseInt","then","data","renderMovies","$19ec9ba508b87b29$var$getPrevValues","currentPage","$19ec9ba508b87b29$var$getNextValues","getCurrentPage","getTotalPages","lastPaginationItemNode","paginationValues","$19ec9ba508b87b29$var$getPaginationValues","nodesArray","flat","$19ec9ba508b87b29$var$renderPaginationDynamicList","nodes","childNodes","insertAdjacentHTML","replace","prevPaginationNode","nextPaginationNode","node","firstRequest","fetchSearchMovies","$368590897c3fddc0$var$hideErrorMessage","setTimeout","searchBadResult","hidden","event","preventDefault","currentTarget","searchQuery","setSearchValue","resetPage","response","searchAnswer"],"version":3,"file":"index.deb61e46.js.map"}