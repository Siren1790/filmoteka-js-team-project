{"mappings":"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","sources":["src/partials_js/pagination.js","src/partials_js/main.js","src/partials_js/spinner.js","src/partials_js/local_genres-storage.js","src/partials_js/search.js"],"sourcesContent":["import {movie} from './api';\nimport { refs } from './refs';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\n\nimport { fetchData } from './main';\n\ndocument.addEventListener('click', (e) => {\n  const target = e.target.closest('.item-pagination');\n  const isTargetCorrect = target && target.parentElement.classList.contains(refs.paginationWrapperNode.classList.value);\n  if (isTargetCorrect) {\n    if(target.textContent === '...') return;\n    movie.fetchTrendingMovies(parseInt(target.textContent))\n      .then(data => {\n        preparePaginationDynamicList();\n        return renderMovies(data.results)\n      });\n  }\n});\nconst getPrevValues = (currentPage) => {\n  if (currentPage >= 5) {\n    return ['...', currentPage -2, currentPage -1]\n  }\n  // \n  if (currentPage > 2 && currentPage < 5){\n    return [\"...\", currentPage -1]\n  }\n\n  if(currentPage <= 2){\n    return[]\n  }\n\n  return [currentPage -2, currentPage -1]\n};\nconst getNextValues = (currentPage) => {\n  return [currentPage + 1, currentPage + 2, '...'];\n}\nconst getPaginationValues = (currentPage, total_pages) => {\n  // if (movie.isFirstPageActive) {\n    if(currentPage == 1){\n    return [2, 3, 4, 5, 6];\n  }\n\n  if (currentPage == total_pages) {\n    // return DEFAULT_END_PAGINATION;\n    return [total_pages - 5, total_pages - 4, total_pages - 3, total_pages - 2, total_pages - 1]\n  }\n  return [getPrevValues(currentPage), currentPage, getNextValues(currentPage)];\n}\nconst preparePaginationDynamicList = () => {\n  refs.paginationWrapperNode.innerHTML = '';\n  // const { currentPage, total_pages} = movie;\n  let currentPage = movie.getCurrentPage();\n  let total_pages = movie.getTotalPages();\n  refs.lastPaginationItemNode.textContent = total_pages;\n  const paginationValues = getPaginationValues(currentPage, total_pages);\n  let nodesArray;\n  nodesArray = paginationValues.flat(1).map((value) => {\n    return `<li class=\"item-pagination\"><button class=\"btn-pagination ${currentPage === value ? 'active' : ''}\">${value}</button></li>`\n  });\n  renderPaginationDynamicList(nodesArray);\n}\nconst renderPaginationDynamicList = (nodes) => {\n  if (refs.paginationWrapperNode.childNodes.length > 0){\n    refs.paginationWrapperNode.innerHTML = null;\n  }\n  if (nodes.length !== 0){\n    refs.paginationWrapperNode.insertAdjacentHTML('afterbegin', nodes.join(\"\").replace(',', '.'))\n  }\n}\n\n[refs.prevPaginationNode, refs.nextPaginationNode].map((node) => {\n  // node && node.addEventListener('click', async () => {\n    node.addEventListener('click', async () => {\n    const pageValue = node.classList.value.includes('prev') ?\n      (movie.currentPage -= 1) : (movie.currentPage += 1);\n     \n          if(movie.firstRequest){\n            // movie.setCurrentPage(event.target.textContent);\n            fetchData();\n          } else{\n            // movie.setCurrentPage(event.target.textContent);\n            const xxx = await movie.fetchSearchMovies();\n            createMarkupCardsFilms(xxx.results);\n          }\n        })\n})\n\n\nexport {preparePaginationDynamicList};","import { movie } from './api';\nimport { refs } from './refs';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\nimport { saveLocalStorageMovies, getLocalStorage } from './local_storage';\nimport { preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList } from './pagination';\nimport { saveStorageGenres, createGenresObject } from './local_genres-storage';\nimport { refs } from './refs';\n\nasync function fetchData() {\n  preloaderShow();\n  const movies = await movie.fetchTrendingMovies();\n  const genres = await movie.fetchMovieGenres();\n  saveLocalStorageMovies(movies);\n  movie.setCurrentPage(movies.page);\n  movie.setTotalPages(movies.total_pages);\n  const objGenres = createGenresObject(genres);\n  saveStorageGenres(objGenres);\n  let cardsMovies = getLocalStorage();\n  let markup = createMarkupCardsFilms(cardsMovies.results);\n  refs.mainMarkFilms.innerHTML = markup;\n  refs.searchButton.scrollIntoView({ block: 'center', behavior: 'smooth' });\n  preparePaginationDynamicList();\n  preloaderHide();\n}\nfetchData();\n\nexport { fetchData };\n","\nimport { refs } from \"./refs\";\n\nconst preloaderHide = () => {\n\trefs.preloader.classList.remove('show-preloader');\n}\n\nconst preloaderShow = () => {\n\trefs.preloader.classList.add('show-preloader');\n}\n\nexport { preloaderHide, preloaderShow }\n\n","import { movie } from './api';\n\n/**\n *\n * @param {*} array\n * @returns an object contains key=id & value=genre\n */\nfunction createGenresObject(array) {\n  const genres = {};\n\n  array.genres.forEach(({ id, name }) => {\n    genres[id] = name;\n  });\n  return genres;\n}\n\n/**\n *\n * @param {*} genres key\n * @returns an object {id: genre} saved in the Local Storage\n */\nfunction saveStorageGenres(genres) {\n    const key = 'genres';\n    const genresState = JSON.stringify(genres);\n    localStorage.setItem(key, genresState);\n}\n\n\n\n/**\n *\n * @param {*} genre_ids\n * @param {*} loadGenres\n * @returns array of genres and can use for modal\n */\nexport {saveStorageGenres, createGenresObject}","import { movie } from './api';\nimport createMarkupCardsFilms from './createMarkupCardsFilms';\nimport { refs } from './refs';\nimport { saveLocalStorageMovies, getLocalStorage } from './local_storage';\nimport { preloaderHide, preloaderShow } from './spinner';\nimport { preparePaginationDynamicList } from './pagination';\n\nrefs.searchBadResult.hidden = true;\n\nasync function hideErrorMessage() {\n  setTimeout(() => (refs.searchBadResult.hidden = true), 2000);\n}\n\nrefs.searchButton.addEventListener('submit', onSubmit);\n\nasync function onSubmit(event) {\n  event.preventDefault();\n  preloaderShow();\n  if (event.currentTarget.searchQuery.value) {\n    refs.searchBadResult.hidden = true;\n    movie.setSearchValue(event.currentTarget.searchQuery.value);\n    event.currentTarget.searchQuery.value = '';\n    movie.resetPage();\n    const response = await movie.fetchSearchMovies();\n    const searchAnswer = response.results;\n\n    movie.setCurrentPage(response.page);\n    movie.setTotalPages(response.total_pages);\n\n    if (searchAnswer.length > 0) {\n      saveLocalStorageMovies(response);\n      let cardsMovies = getLocalStorage();\n      let markup = createMarkupCardsFilms(cardsMovies.results);\n      refs.mainMarkFilms.innerHTML = markup;\n      refs.searchButton.scrollIntoView({\n        block: 'center',\n        behavior: 'smooth',\n      });\n\n      movie.firstRequest = false;\n      preparePaginationDynamicList();\n    } else {\n      refs.searchBadResult.hidden = false;\n      hideErrorMessage();\n    }\n  } else {\n    refs.searchBadResult.hidden = false;\n    hideErrorMessage();\n  }\n  preloaderHide();\n}\n\nexport { onSubmit };\n"],"names":["$ll9qB","parcelRequire","$kgjKk","$a64966ae89115f44$export$f4c41a4539594acb","refs","preloader","classList","remove","$a64966ae89115f44$export$c8b0c55c24870a90","add","$36ac885cdd85b1bf$export$94e2638a41923eca","array","genres","forEach","id","name","$36ac885cdd85b1bf$export$a27d5cb887d5263a","genresState","JSON","stringify","localStorage","setItem","async","$738ac1d93c48538f$export$8134c072fddab6a5","movies","movie","fetchTrendingMovies","fetchMovieGenres","$hbEqn","saveLocalStorageMovies","setCurrentPage","page","setTotalPages","total_pages","cardsMovies","getLocalStorage","markup","$cBXj4","default","results","mainMarkFilms","innerHTML","searchButton","scrollIntoView","block","behavior","$19ec9ba508b87b29$export$8f98098a7ec6ad44","document","addEventListener","e","target","closest","parentElement","contains","paginationWrapperNode","value","textContent","parseInt","then","data","renderMovies","$19ec9ba508b87b29$var$getPrevValues","currentPage","$19ec9ba508b87b29$var$getNextValues","getCurrentPage","getTotalPages","lastPaginationItemNode","paginationValues","$19ec9ba508b87b29$var$getPaginationValues","nodesArray","flat","map","$19ec9ba508b87b29$var$renderPaginationDynamicList","nodes","childNodes","length","insertAdjacentHTML","join","replace","prevPaginationNode","nextPaginationNode","node","includes","firstRequest","xxx","fetchSearchMovies","$368590897c3fddc0$var$hideErrorMessage","setTimeout","searchBadResult","hidden","event","preventDefault","currentTarget","searchQuery","setSearchValue","resetPage","response","searchAnswer"],"version":3,"file":"index.4981237e.js.map"}